{
  "api/gradssharp/GradsSharp.Data.Grads.IGradsDatabase.html": {
    "href": "api/gradssharp/GradsSharp.Data.Grads.IGradsDatabase.html",
    "title": "Interface IGradsDatabase",
    "summary": "Interface IGradsDatabase Namespace GradsSharp.Data.Grads Assembly GradsSharp.dll public interface IGradsDatabase Methods gxdbacol(int, int, int, int, int) int gxdbacol(int clr, int red, int green, int blue, int alpha) Parameters clr int red int green int blue int alpha int Returns int gxdbkq() int gxdbkq() Returns int gxdboutbck(int) void gxdboutbck(int clr) Parameters clr int gxdbqcol(int) (int, int, int, int, int) gxdbqcol(int colr) Parameters colr int Returns (int, int, int, int, int) gxdbqfont(int) (string, bool, int) gxdbqfont(int fn) Parameters fn int Returns (string, bool, int) gxdbqhersh() int gxdbqhersh() Returns int gxdbqtransclr() int gxdbqtransclr() Returns int gxdbqwid(int) double gxdbqwid(int idx) Parameters idx int Returns double gxdbsettransclr(int) void gxdbsettransclr(int clr) Parameters clr int"
  },
  "api/gradssharp/GradsSharp.Data.Grads.html": {
    "href": "api/gradssharp/GradsSharp.Data.Grads.html",
    "title": "Namespace GradsSharp.Data.Grads",
    "summary": "Namespace GradsSharp.Data.Grads Interfaces IGradsDatabase"
  },
  "api/gradssharp/GradsSharp.Data.GridFunctions.GridInterpolationFunctions.html": {
    "href": "api/gradssharp/GradsSharp.Data.GridFunctions.GridInterpolationFunctions.html",
    "title": "Class GridInterpolationFunctions",
    "summary": "Class GridInterpolationFunctions Namespace GradsSharp.Data.GridFunctions Assembly GradsSharp.dll public static class GridInterpolationFunctions Inheritance object GridInterpolationFunctions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Interpolate(VariableDefinition, VariableDefinition, IGradsGrid, IGradsCommandInterface, InterpolationMode) function to interpolate within a 3-D grid to a specified pressure level. Can also be used on non-pressure level data, such as sigma or eta-coordinate output where pressure is a function of time and grid level. public static IGradsGrid Interpolate(VariableDefinition fieldvar, VariableDefinition pgridvar, IGradsGrid plevvar, IGradsCommandInterface cmd, InterpolationMode mode) Parameters fieldvar VariableDefinition pgridvar VariableDefinition plevvar IGradsGrid cmd IGradsCommandInterface mode InterpolationMode Returns IGradsGrid"
  },
  "api/gradssharp/GradsSharp.Data.GridFunctions.GridMaskFunctions.html": {
    "href": "api/gradssharp/GradsSharp.Data.GridFunctions.GridMaskFunctions.html",
    "title": "Class GridMaskFunctions",
    "summary": "Class GridMaskFunctions Namespace GradsSharp.Data.GridFunctions Assembly GradsSharp.dll public static class GridMaskFunctions Inheritance object GridMaskFunctions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Const(IGradsGrid, int, ConstMode) public static IGradsGrid Const(this IGradsGrid grid, int cnst, ConstMode mode) Parameters grid IGradsGrid cnst int mode ConstMode Returns IGradsGrid MaskOut(IGradsGrid, IGradsGrid) public static IGradsGrid MaskOut(this IGradsGrid grid, IGradsGrid grid2) Parameters grid IGradsGrid grid2 IGradsGrid Returns IGradsGrid Skip(IGradsGrid, int) public static IGradsGrid Skip(this IGradsGrid grid, int iskip) Parameters grid IGradsGrid iskip int Returns IGradsGrid Skip(IGradsGrid, int, int) public static IGradsGrid Skip(this IGradsGrid grid, int iskip, int jskip) Parameters grid IGradsGrid iskip int jskip int Returns IGradsGrid"
  },
  "api/gradssharp/GradsSharp.Data.GridFunctions.GridMathFunctions.html": {
    "href": "api/gradssharp/GradsSharp.Data.GridFunctions.GridMathFunctions.html",
    "title": "Class GridMathFunctions",
    "summary": "Class GridMathFunctions Namespace GradsSharp.Data.GridFunctions Assembly GradsSharp.dll Math functions for grids public static class GridMathFunctions Inheritance object GridMathFunctions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Add(IGradsGrid, IGradsGrid) public static IGradsGrid Add(this IGradsGrid grid1, IGradsGrid grid2) Parameters grid1 IGradsGrid grid2 IGradsGrid Returns IGradsGrid Add(IGradsGrid, double) public static IGradsGrid Add(this IGradsGrid grid, double value) Parameters grid IGradsGrid value double Returns IGradsGrid Average(IGradsGrid, params IGradsGrid[]) public static IGradsGrid Average(this IGradsGrid grid1, params IGradsGrid[] otherGrids) Parameters grid1 IGradsGrid otherGrids IGradsGrid[] Returns IGradsGrid CDiff(IGradsGrid, Dimension) public static IGradsGrid CDiff(this IGradsGrid grid1, Dimension dimemsion) Parameters grid1 IGradsGrid dimemsion Dimension Returns IGradsGrid Divide(IGradsGrid, IGradsGrid) public static IGradsGrid Divide(this IGradsGrid grid1, IGradsGrid grid2) Parameters grid1 IGradsGrid grid2 IGradsGrid Returns IGradsGrid Divide(IGradsGrid, double) public static IGradsGrid Divide(this IGradsGrid grid, double value) Parameters grid IGradsGrid value double Returns IGradsGrid Exp(IGradsGrid) public static IGradsGrid Exp(this IGradsGrid grid) Parameters grid IGradsGrid Returns IGradsGrid HCurl(IGradsGrid, IGradsGrid) public static IGradsGrid HCurl(this IGradsGrid grid1, IGradsGrid grid2) Parameters grid1 IGradsGrid grid2 IGradsGrid Returns IGradsGrid Log(IGradsGrid) public static IGradsGrid Log(this IGradsGrid grid) Parameters grid IGradsGrid Returns IGradsGrid Multiply(IGradsGrid, IGradsGrid) public static IGradsGrid Multiply(this IGradsGrid grid1, IGradsGrid grid2) Parameters grid1 IGradsGrid grid2 IGradsGrid Returns IGradsGrid Multiply(IGradsGrid, double) public static IGradsGrid Multiply(this IGradsGrid grid, double value) Parameters grid IGradsGrid value double Returns IGradsGrid Pow(IGradsGrid, double) public static IGradsGrid Pow(this IGradsGrid grid, double value) Parameters grid IGradsGrid value double Returns IGradsGrid Sqrt(IGradsGrid) public static IGradsGrid Sqrt(this IGradsGrid grid) Parameters grid IGradsGrid Returns IGradsGrid Subtract(IGradsGrid, IGradsGrid) public static IGradsGrid Subtract(this IGradsGrid grid1, IGradsGrid grid2) Parameters grid1 IGradsGrid grid2 IGradsGrid Returns IGradsGrid Subtract(IGradsGrid, double) public static IGradsGrid Subtract(this IGradsGrid grid, double value) Parameters grid IGradsGrid value double Returns IGradsGrid"
  },
  "api/gradssharp/GradsSharp.Data.GridFunctions.GridSmoothFunctions.html": {
    "href": "api/gradssharp/GradsSharp.Data.GridFunctions.GridSmoothFunctions.html",
    "title": "Class GridSmoothFunctions",
    "summary": "Class GridSmoothFunctions Namespace GradsSharp.Data.GridFunctions Assembly GradsSharp.dll public static class GridSmoothFunctions Inheritance object GridSmoothFunctions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Smooth9(IGradsGrid, double, double, double) public static IGradsGrid Smooth9(this IGradsGrid grid, double midWeight = 1, double sideWeight = 0.5, double cornerWeight = 0.3) Parameters grid IGradsGrid midWeight double sideWeight double cornerWeight double Returns IGradsGrid"
  },
  "api/gradssharp/GradsSharp.Data.GridFunctions.html": {
    "href": "api/gradssharp/GradsSharp.Data.GridFunctions.html",
    "title": "Namespace GradsSharp.Data.GridFunctions",
    "summary": "Namespace GradsSharp.Data.GridFunctions Classes GridInterpolationFunctions GridMaskFunctions GridMathFunctions Math functions for grids GridSmoothFunctions"
  },
  "api/gradssharp/GradsSharp.Data.IGridFunctions.html": {
    "href": "api/gradssharp/GradsSharp.Data.IGridFunctions.html",
    "title": "Interface IGridFunctions",
    "summary": "Interface IGridFunctions Namespace GradsSharp.Data Assembly GradsSharp.dll public interface IGridFunctions"
  },
  "api/gradssharp/GradsSharp.Data.IGriddedDataReader.html": {
    "href": "api/gradssharp/GradsSharp.Data.IGriddedDataReader.html",
    "title": "Interface IGriddedDataReader",
    "summary": "Interface IGriddedDataReader Namespace GradsSharp.Data Assembly GradsSharp.dll public interface IGriddedDataReader Methods CloseFile() void CloseFile() OpenFile(Stream, string) InputFile OpenFile(Stream stream, string file) Parameters stream Stream file string Returns InputFile OpenFile(string) InputFile OpenFile(string fileName) Parameters fileName string Returns InputFile ReadData(IGradsGrid, VariableDefinition) void ReadData(IGradsGrid grid, VariableDefinition definition) Parameters grid IGradsGrid definition VariableDefinition"
  },
  "api/gradssharp/GradsSharp.Data.IVariableMapping.html": {
    "href": "api/gradssharp/GradsSharp.Data.IVariableMapping.html",
    "title": "Interface IVariableMapping",
    "summary": "Interface IVariableMapping Namespace GradsSharp.Data Assembly GradsSharp.dll public interface IVariableMapping Methods GetGrib2VarType(int, int, int) string GetGrib2VarType(int disciple, int paramCategory, int paramNumber) Parameters disciple int paramCategory int paramNumber int Returns string GetVariableInfo(string) object GetVariableInfo(string variable) Parameters variable string Returns object"
  },
  "api/gradssharp/GradsSharp.Data.html": {
    "href": "api/gradssharp/GradsSharp.Data.html",
    "title": "Namespace GradsSharp.Data",
    "summary": "Namespace GradsSharp.Data Namespaces GradsSharp.Data.Grads GradsSharp.Data.GridFunctions Interfaces IGridFunctions IGriddedDataReader IVariableMapping"
  },
  "api/gradssharp/GradsSharp.Drawing.Grads.Gx.html": {
    "href": "api/gradssharp/GradsSharp.Drawing.Grads.Gx.html",
    "title": "Class Gx",
    "summary": "Class Gx Namespace GradsSharp.Drawing.Grads Assembly GradsSharp.dll public class Gx Inheritance object Gx Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors Gx() public Gx() Fields COLORMAX public static int COLORMAX Field Value int FUZZ_SCALE public static double FUZZ_SCALE Field Value double"
  },
  "api/gradssharp/GradsSharp.Drawing.Grads.IDrawingEngine.html": {
    "href": "api/gradssharp/GradsSharp.Drawing.Grads.IDrawingEngine.html",
    "title": "Interface IDrawingEngine",
    "summary": "Interface IDrawingEngine Namespace GradsSharp.Drawing.Grads Assembly GradsSharp.dll This interface can be used to implement a new drawing engine for Grads. See all methods for more information on the different functions public interface IDrawingEngine Methods gxpacol(int) void gxpacol(int col) Parameters col int gxpbpoly() void gxpbpoly() gxpcfg() void gxpcfg() gxpch(char, int, double, double, double, double, double) double gxpch(char ch, int fn, double x, double y, double w, double h, double rot) Parameters ch char fn int x double y double w double h double rot double Returns double gxpckfont() bool gxpckfont() Returns bool gxpclip(double, double, double, double) void gxpclip(double x1, double x2, double y1, double y2) Parameters x1 double x2 double y1 double y2 double gxpcol(int) void gxpcol(int col) Parameters col int gxpdrw(double, double) void gxpdrw(double xpos, double ypos) Parameters xpos double ypos double gxpend() void gxpend() gxpepoly(double[], int) void gxpepoly(double[] xybuf, int xyc) Parameters xybuf double[] xyc int gxpflush(int) void gxpflush(int opt) Parameters opt int gxpinit(double, double) Initialize the drawing void gxpinit(double xsz, double ysz) Parameters xsz double ysz double gxpmov(double, double) void gxpmov(double xpos, double ypos) Parameters xpos double ypos double gxpqchl(char, int, double) double gxpqchl(char ch, int fn, double w) Parameters ch char fn int w double Returns double gxprec(double, double, double, double) void gxprec(double x1, double x2, double y1, double y2) Parameters x1 double x2 double y1 double y2 double gxprint(string, int, int, int, int, string, string, int, double) int gxprint(string fnout, int xin, int yin, int bwin, int fmtflg, string bgImage, string fgImage, int tcolor, double border) Parameters fnout string xin int yin int bwin int fmtflg int bgImage string fgImage string tcolor int border double Returns int gxpsignal(int) void gxpsignal(int sig) Parameters sig int gxpwid(int) void gxpwid(int wid) Parameters wid int"
  },
  "api/gradssharp/GradsSharp.Drawing.Grads.html": {
    "href": "api/gradssharp/GradsSharp.Drawing.Grads.html",
    "title": "Namespace GradsSharp.Drawing.Grads",
    "summary": "Namespace GradsSharp.Drawing.Grads Classes Gx Interfaces IDrawingEngine This interface can be used to implement a new drawing engine for Grads. See all methods for more information on the different functions"
  },
  "api/gradssharp/GradsSharp.Enums.AreaFunction.html": {
    "href": "api/gradssharp/GradsSharp.Enums.AreaFunction.html",
    "title": "Enum AreaFunction",
    "summary": "Enum AreaFunction Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum AreaFunction Fields Average = 1 Mean = 2 Sum = 3 SumG = 4 Total = 5"
  },
  "api/gradssharp/GradsSharp.Enums.Axis.html": {
    "href": "api/gradssharp/GradsSharp.Enums.Axis.html",
    "title": "Enum Axis",
    "summary": "Enum Axis Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum Axis Fields X = 0 Y = 1"
  },
  "api/gradssharp/GradsSharp.Enums.AxisLabelOption.html": {
    "href": "api/gradssharp/GradsSharp.Enums.AxisLabelOption.html",
    "title": "Enum AxisLabelOption",
    "summary": "Enum AxisLabelOption Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum AxisLabelOption Fields Format = 2 Off = 0 On = 1"
  },
  "api/gradssharp/GradsSharp.Enums.BackgroundColor.html": {
    "href": "api/gradssharp/GradsSharp.Enums.BackgroundColor.html",
    "title": "Enum BackgroundColor",
    "summary": "Enum BackgroundColor Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum BackgroundColor Fields Black = 0 Default = -999 White = 1"
  },
  "api/gradssharp/GradsSharp.Enums.ClearAction.html": {
    "href": "api/gradssharp/GradsSharp.Enums.ClearAction.html",
    "title": "Enum ClearAction",
    "summary": "Enum ClearAction Namespace GradsSharp.Enums Assembly GradsSharp.dll Clear action options public enum ClearAction Fields Events = 2 Graphics = 3 HBuff = 4 Mask = 9 NoReset = 1 Rband = 6 SdfWrite = 8 Shp = 10"
  },
  "api/gradssharp/GradsSharp.Enums.ColorBarDirection.html": {
    "href": "api/gradssharp/GradsSharp.Enums.ColorBarDirection.html",
    "title": "Enum ColorBarDirection",
    "summary": "Enum ColorBarDirection Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum ColorBarDirection Fields Auto = 0 Horizontal = 2 Vertical = 1"
  },
  "api/gradssharp/GradsSharp.Enums.ConstMode.html": {
    "href": "api/gradssharp/GradsSharp.Enums.ConstMode.html",
    "title": "Enum ConstMode",
    "summary": "Enum ConstMode Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum ConstMode Fields All = 2 Missing = 1 Undefined = 0"
  },
  "api/gradssharp/GradsSharp.Enums.Dimension.html": {
    "href": "api/gradssharp/GradsSharp.Enums.Dimension.html",
    "title": "Enum Dimension",
    "summary": "Enum Dimension Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum Dimension Fields E = 4 T = 3 X = 0 Y = 1 Z = 2"
  },
  "api/gradssharp/GradsSharp.Enums.DimensionType.html": {
    "href": "api/gradssharp/GradsSharp.Enums.DimensionType.html",
    "title": "Enum DimensionType",
    "summary": "Enum DimensionType Namespace GradsSharp.Enums Assembly GradsSharp.dll Dimension type public enum DimensionType Fields Fixed = 0 Varying = 1"
  },
  "api/gradssharp/GradsSharp.Enums.FileType.html": {
    "href": "api/gradssharp/GradsSharp.Enums.FileType.html",
    "title": "Enum FileType",
    "summary": "Enum FileType Namespace GradsSharp.Enums Assembly GradsSharp.dll File type public enum FileType Fields DefinedGrid = 4 Gridded = 1 MappedStation = 3 SimpleStation = 2"
  },
  "api/gradssharp/GradsSharp.Enums.FixedSurfaceType.html": {
    "href": "api/gradssharp/GradsSharp.Enums.FixedSurfaceType.html",
    "title": "Enum FixedSurfaceType",
    "summary": "Enum FixedSurfaceType Namespace GradsSharp.Enums Assembly GradsSharp.dll Surface type for data sources public enum FixedSurfaceType Fields CloudBaseLevel = 2 DepthBelowLandSurface = 106 DepthBelowSeaLevel = 160 EtaLevel = 111 GroundOrWaterSurface = 1 HybridLevel = 105 IsentropicLevel = 107 IsobaricSurface = 100 IsothermalLevel = 20 LevelAtSpecifiedPressureDifferenceFromGroundToLevel = 108 LevelOf0CIsotherm = 4 LevelOfAdiabaticCondensationLiftedFromTheSurface = 5 LevelOfCloudTops = 3 MaximumWindLevel = 6 MeanSeaLevel = 101 Missing = 255 MixedLayerDepth = 117 MostUnstableParcelLevel = 17 NominalTopOfTheAtmosphere = 8 PotentialVorticitySurface = 109 SeaBottom = 9 SigmaLevel = 104 SoilLevelNumeric = 151 SpecificAltitudeAboveMeanSeaLevel = 102 SpecifiedHeightLevelAboveGround = 103 Tropopause = 7"
  },
  "api/gradssharp/GradsSharp.Enums.GraphicsOutputMode.html": {
    "href": "api/gradssharp/GradsSharp.Enums.GraphicsOutputMode.html",
    "title": "Enum GraphicsOutputMode",
    "summary": "Enum GraphicsOutputMode Namespace GradsSharp.Enums Assembly GradsSharp.dll Graphics output mode public enum GraphicsOutputMode Fields Bar = 29 \\remark currently not implemented Barb = 18 Wind barbs Contour = 1 Contour plot ErrorBar = 30 \\remark currently not implemented FGrid = 9 Shaded grid boxes FWrite = 10 Writes data to file instead of drawing a plot \\remark currently not implemented FindStation = 19 \\remark currently not implemented GeoTiff = 13 Generates a GeoTIFF format data file \\remark currently not implemented Grid = 6 Grid boxes with printed values GridFill = 12 Shaded grid boxes Imap = 15 \\remark currently not implemented Kml = 14 Generates a KML file Line = 24 \\remark currently not implemented LineFill = 31 Color fill between two lines \\remark currently not implemented Model = 20 \\remark currently not implemented Print = 26 \\remark currently not implemented Scatter = 8 Generates a scatter diagram. Requires two grid expressions as arguments, separated by a semicolon Shade1 = 3 Shaded/filled contour plot, original algorithm Shade2 = 4 Shaded/filled contour plot, new algorithm, polygons merged to be larger and fewer in number (faster to render) Shade2b = 5 Shaded contour plot, new algorithm, polygons all on sub-grid scale (slower to render) Shaded = 2 Shaded/filled contour plot, alias for original algorithm (shade1) Shape = 16 \\remark currently not implemented Stat = 25 \\remark currently not implemented StationMark = 22 \\remark currently not implemented StationValues = 17 \\remark currently not implemented StationWrt = 23 \\remark currently not implemented Stream = 11 Wind streamlines TimeSeriesBarb = 28 \\remark currently not implemented TimeSeriesWeatherSymbols = 27 \\remark currently not implemented Vector = 7 Wind vector arrows WXSymbol = 21 \\remark currently not implemented"
  },
  "api/gradssharp/GradsSharp.Enums.GridLine.html": {
    "href": "api/gradssharp/GradsSharp.Enums.GridLine.html",
    "title": "Enum GridLine",
    "summary": "Enum GridLine Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum GridLine Fields Auto = 0 Color = 2 Off = 1"
  },
  "api/gradssharp/GradsSharp.Enums.GridLineOption.html": {
    "href": "api/gradssharp/GradsSharp.Enums.GridLineOption.html",
    "title": "Enum GridLineOption",
    "summary": "Enum GridLineOption Namespace GradsSharp.Enums Assembly GradsSharp.dll Describes the options for drawing grid lines when using the grid output mode public enum GridLineOption Fields Auto = 0 The grid lines are drawn and are the same color as the text. Color = 2 The grid lines are drawn in the specified color Off = 1 The grid lines are not drawn."
  },
  "api/gradssharp/GradsSharp.Enums.GridOption.html": {
    "href": "api/gradssharp/GradsSharp.Enums.GridOption.html",
    "title": "Enum GridOption",
    "summary": "Enum GridOption Namespace GradsSharp.Enums Assembly GradsSharp.dll Options for drawing grid lines public enum GridOption Fields Horizontal = 2 Only the latitude lines are drawn Off = 0 No grid lines are drawn On = 1 Default option. Grid lines are drawn Vertical = 3 Only the longitude lines are drawn"
  },
  "api/gradssharp/GradsSharp.Enums.InputFileDimensionType.html": {
    "href": "api/gradssharp/GradsSharp.Enums.InputFileDimensionType.html",
    "title": "Enum InputFileDimensionType",
    "summary": "Enum InputFileDimensionType Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum InputFileDimensionType Fields Levels = 1 Linear = 0"
  },
  "api/gradssharp/GradsSharp.Enums.InterpolationMode.html": {
    "href": "api/gradssharp/GradsSharp.Enums.InterpolationMode.html",
    "title": "Enum InterpolationMode",
    "summary": "Enum InterpolationMode Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum InterpolationMode Fields PiecewiseLinear = 0 Polynomnial = 2 Spline = 1 Undefined = -1"
  },
  "api/gradssharp/GradsSharp.Enums.IntervalType.html": {
    "href": "api/gradssharp/GradsSharp.Enums.IntervalType.html",
    "title": "Enum IntervalType",
    "summary": "Enum IntervalType Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum IntervalType Fields Fac = 1 Interval = 0"
  },
  "api/gradssharp/GradsSharp.Enums.KmlOutputFlag.html": {
    "href": "api/gradssharp/GradsSharp.Enums.KmlOutputFlag.html",
    "title": "Enum KmlOutputFlag",
    "summary": "Enum KmlOutputFlag Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum KmlOutputFlag Fields Contour = 2 Image = 1 Polygon = 3"
  },
  "api/gradssharp/GradsSharp.Enums.LabelOption.html": {
    "href": "api/gradssharp/GradsSharp.Enums.LabelOption.html",
    "title": "Enum LabelOption",
    "summary": "Enum LabelOption Namespace GradsSharp.Enums Assembly GradsSharp.dll Controls the contour line labeling public enum LabelOption Fields Auto = 4 Reset the label format Forced = 3 An attempt is made to label all contour lines Masked = 2 Contour lines have gaps for the labels, so rectangles for label background are not drawn; contour labels never overlap. Off = 1 No Contour labels are plotted On = 0 'fast' contour labels are plotted where the contour lines are horizontal"
  },
  "api/gradssharp/GradsSharp.Enums.LineStyle.html": {
    "href": "api/gradssharp/GradsSharp.Enums.LineStyle.html",
    "title": "Enum LineStyle",
    "summary": "Enum LineStyle Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum LineStyle Fields DotDash = 6 DotDotDash = 7 Dotted = 5 LongDash = 2 LongDashShortDash = 4 NoContours = 0 ShortDash = 3 Solid = 1"
  },
  "api/gradssharp/GradsSharp.Enums.MapResolution.html": {
    "href": "api/gradssharp/GradsSharp.Enums.MapResolution.html",
    "title": "Enum MapResolution",
    "summary": "Enum MapResolution Namespace GradsSharp.Enums Assembly GradsSharp.dll Map resolution options public enum MapResolution Fields HighResolution = 3 High resolution: includes state and country lines LowResolution = 1 Low resolution map (default) MediumResolution = 2 Medium resolution: includes state and country lines Undefined = 0 Defaults to low resolution"
  },
  "api/gradssharp/GradsSharp.Enums.MultiLevelFunction.html": {
    "href": "api/gradssharp/GradsSharp.Enums.MultiLevelFunction.html",
    "title": "Enum MultiLevelFunction",
    "summary": "Enum MultiLevelFunction Namespace GradsSharp.Enums Assembly GradsSharp.dll Function to apply to a multi-level grid public enum MultiLevelFunction Fields Average = 1 Maximum = 6 Mean = 2 Minimum = 5 Sum = 3 SumNonWeighted = 4"
  },
  "api/gradssharp/GradsSharp.Enums.OnOffSetting.html": {
    "href": "api/gradssharp/GradsSharp.Enums.OnOffSetting.html",
    "title": "Enum OnOffSetting",
    "summary": "Enum OnOffSetting Namespace GradsSharp.Enums Assembly GradsSharp.dll On/Off setting public enum OnOffSetting Fields Off = 1 Off On = 0 On"
  },
  "api/gradssharp/GradsSharp.Enums.Orientation.html": {
    "href": "api/gradssharp/GradsSharp.Enums.Orientation.html",
    "title": "Enum Orientation",
    "summary": "Enum Orientation Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum Orientation Fields Landscape = 1 Portrait = 2"
  },
  "api/gradssharp/GradsSharp.Enums.OutputFormat.html": {
    "href": "api/gradssharp/GradsSharp.Enums.OutputFormat.html",
    "title": "Enum OutputFormat",
    "summary": "Enum OutputFormat Namespace GradsSharp.Enums Assembly GradsSharp.dll Output image format public enum OutputFormat Fields EPS = 1 EPS Output format GIF = 6 GIF output format JPEG = 7 JPEG output format PDF = 3 PDF output format PNG = 5 PNG output format PS = 2 PS Output format SVG = 4 SVG output format Undefined = 0 Not defined. The output format will be determined by the file extension of the path parameter."
  },
  "api/gradssharp/GradsSharp.Enums.PreprojectedType.html": {
    "href": "api/gradssharp/GradsSharp.Enums.PreprojectedType.html",
    "title": "Enum PreprojectedType",
    "summary": "Enum PreprojectedType Namespace GradsSharp.Enums Assembly GradsSharp.dll Type of preprojected grid public enum PreprojectedType Fields BILIN = 8 ETAU = 5 FILE = 9 GENERAL = 10 LCC = 3 LCCR = 4 NPS = 1 North Polar Stereographic None = 0 Not preprojected OPS = 7 PSE = 6 ROTLL = 11 Rotated lat lon grid ROTLLR = 12 Rotated lat lon grid with pole at lower right SPS = 2 South Polar Stereographic"
  },
  "api/gradssharp/GradsSharp.Enums.Projection.html": {
    "href": "api/gradssharp/GradsSharp.Enums.Projection.html",
    "title": "Enum Projection",
    "summary": "Enum Projection Namespace GradsSharp.Enums Assembly GradsSharp.dll Projection modes available public enum Projection Fields Lambert = 13 Lambert conformal conic projection Latlon = 2 Lat/lon projection with aspect ratio maintained (default) Mollweide = 6 Mollweide projection Nps = 3 North polar stereographic Off = 0 No map is drawn Ortographic = 7 Orthographic projection Robinson = 5 Robinson projection, requires SetLongitude(double, double) -180 180, SetLatitude(double, double) -90 90 Scaled = 1 Lat/lon aspect ratio is not maintained; plot fills entire plotting area Sps = 4 South polar stereographic"
  },
  "api/gradssharp/GradsSharp.Enums.SmoothOption.html": {
    "href": "api/gradssharp/GradsSharp.Enums.SmoothOption.html",
    "title": "Enum SmoothOption",
    "summary": "Enum SmoothOption Namespace GradsSharp.Enums Assembly GradsSharp.dll Controls the contour line smoothing public enum SmoothOption Fields Linear = 2 Off = 0 On = 1"
  },
  "api/gradssharp/GradsSharp.Enums.StringJustification.html": {
    "href": "api/gradssharp/GradsSharp.Enums.StringJustification.html",
    "title": "Enum StringJustification",
    "summary": "Enum StringJustification Namespace GradsSharp.Enums Assembly GradsSharp.dll public enum StringJustification Fields BottomCenter = 1 BottomLeft = 0 BottomRight = 2 Center = 4 Left = 3 Right = 5 TopCenter = 7 TopLeft = 6 TopRight = 8 Undefined = 0"
  },
  "api/gradssharp/GradsSharp.Enums.html": {
    "href": "api/gradssharp/GradsSharp.Enums.html",
    "title": "Namespace GradsSharp.Enums",
    "summary": "Namespace GradsSharp.Enums Enums AreaFunction Axis AxisLabelOption BackgroundColor ClearAction Clear action options ColorBarDirection ConstMode Dimension DimensionType Dimension type FileType File type FixedSurfaceType Surface type for data sources GraphicsOutputMode Graphics output mode GridLine GridLineOption Describes the options for drawing grid lines when using the grid output mode GridOption Options for drawing grid lines InputFileDimensionType InterpolationMode IntervalType KmlOutputFlag LabelOption Controls the contour line labeling LineStyle MapResolution Map resolution options MultiLevelFunction Function to apply to a multi-level grid OnOffSetting On/Off setting Orientation OutputFormat Output image format PreprojectedType Type of preprojected grid Projection Projection modes available SmoothOption Controls the contour line smoothing StringJustification"
  },
  "api/gradssharp/GradsSharp.Exceptions.InvalidColorException.html": {
    "href": "api/gradssharp/GradsSharp.Exceptions.InvalidColorException.html",
    "title": "Class InvalidColorException",
    "summary": "Class InvalidColorException Namespace GradsSharp.Exceptions Assembly GradsSharp.dll public class InvalidColorException : Exception, ISerializable Inheritance object Exception InvalidColorException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InvalidColorException(string) Exception thrown when an invalid color is being defined public InvalidColorException(string message) Parameters message string"
  },
  "api/gradssharp/GradsSharp.Exceptions.html": {
    "href": "api/gradssharp/GradsSharp.Exceptions.html",
    "title": "Namespace GradsSharp.Exceptions",
    "summary": "Namespace GradsSharp.Exceptions Classes InvalidColorException"
  },
  "api/gradssharp/GradsSharp.GradsEngine.html": {
    "href": "api/gradssharp/GradsSharp.GradsEngine.html",
    "title": "Class GradsEngine",
    "summary": "Class GradsEngine Namespace GradsSharp Assembly GradsSharp.dll This class is the basis to start working with the library. It gives you an interface to send commands to the drawing backend. It requires registration of a IDrawingEngine to be able to output the drawings to an outputtype of choice public class GradsEngine Inheritance object GradsEngine Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors GradsEngine(ILogger?, Orientation, double) Constructor for the GradsEngine. The constructor will initialize the paper size based on orientation and aspectratio. Default values for the papersizes: Landscape: 11.0 x 8.5 Portrait: 8.5 x 11.0 public GradsEngine(ILogger? logger = null, Orientation orientation = Orientation.Landscape, double aspectRatio = -999) Parameters logger ILogger optional logger to output information about the drawing orientation Orientation Orientation of the output aspectRatio double Aspect ratio for the output size Properties GradsCommandInterface Entry to send commands to the engine public IGradsCommandInterface GradsCommandInterface { get; } Property Value IGradsCommandInterface GradsDatabase Entry to the in memory database of colors, line widths, ... public IGradsDatabase GradsDatabase { get; } Property Value IGradsDatabase GradsDrawingInterface Entry to direct drawing some basic shapes and text public IGradsDrawingInterface GradsDrawingInterface { get; } Property Value IGradsDrawingInterface Logger public static ILogger? Logger { get; } Property Value ILogger Methods DrawBuffersToOutput() Called from a drawing engine to draw all instructions in the buffer to the output public void DrawBuffersToOutput() EndDrawing() Ends the drawing operations public void EndDrawing() InitEngine() Initializes the engine and graphics output. This should only be called once public void InitEngine() Exceptions Exception RegisterDrawingEngine(IDrawingEngine) Register a drawing engine to output the drawing instructions to public void RegisterDrawingEngine(IDrawingEngine engine) Parameters engine IDrawingEngine Instance of the drawing engine"
  },
  "api/gradssharp/GradsSharp.IGradsCommandInterface.html": {
    "href": "api/gradssharp/GradsSharp.IGradsCommandInterface.html",
    "title": "Interface IGradsCommandInterface",
    "summary": "Interface IGradsCommandInterface Namespace GradsSharp Assembly GradsSharp.dll Interface for sending commands to the Grads engine public interface IGradsCommandInterface Methods Clear(ClearAction?) Issued without parameters, the clear command does pretty heavy duty clearing of many of the GradsSharp internal settings. Parameters can be added to limit what is cleared when using more advanced features. void Clear(ClearAction? action) Parameters action ClearAction? Close() Close the the last opened file void Close() Define(string, IGradsGrid) Define a new variable void Define(string varName, IGradsGrid data) Parameters varName string Name of the variable. This name can be passed to the Display command to execute the plotting data IGradsGrid Data for the variable See Also GetVariable(VariableDefinition, int) Display(string) Draw data for a variable int Display(string variable) Parameters variable string Name of a defined variable. Returns int 0 if everything went fine. 1 when an error occurred DrawString(double, double, string) Draw a string on the plot int DrawString(double x, double y, string text) Parameters x double X-coordinate in virtual page units y double Y-coordinate in virtual page units text string Text to plot Returns int 0 if everything went fine. 1 when an error occurred See Also SetStringOptions(int, StringJustification, int, double) SetStringSize(double, double) ExportImage(string, OutputFormat, string, string, BackgroundColor, int, int, int, double) The ExportImage command will produce a PNG, GIF, or JPG formatted image file based on the current contents of the metabuffer. void ExportImage(string path, OutputFormat format = OutputFormat.Undefined, string backgroundImage = \"\", string foregroundImage = \"\", BackgroundColor backColor = BackgroundColor.Default, int transparentColor = -1, int horizontalSize = -999, int verticalSize = -999, double borderWidth = -1) Parameters path string The name of the output file. If this file exists, it will be replaced. If the filename ends with \".png\" or \".PNG\" then GradsSharp will automatically create the image in PNG format If the filename ends with \".gif\" or \".GIF\" then GradsSharp will automatically create the image in GIF format If the filename ends with \".jpg\" or \".JPG\" then GradsSharp will automatically create the image in JPEG format format OutputFormat The format of the output file. If not specified, the format will be determined by the file extension of the path parameter. backgroundImage string The name of the background image file. foregroundImage string The name of the foreground image file. backColor BackgroundColor The background color of the image. If not specified, the default background color will be used. transparentColor int The color number to be treated as transparent. horizontalSize int The horizontal size of the image in pixels. If not specified, the default size will be calculated. verticalSize int The vertical size of the image in pixels. If not specified, the default size will be calculated. borderWidth double The width of the border. GetMultiLevelData(VariableDefinition, double, double, MultiLevelFunction) Returns data from multiple levels for a specific variable IGradsGrid? GetMultiLevelData(VariableDefinition definition, double startLevel, double endLevel, MultiLevelFunction function) Parameters definition VariableDefinition Definition of the variable startLevel double Start level to fetch data endLevel double End level to fetch data function MultiLevelFunction Function to apply on the data Returns IGradsGrid Grid with meta information and the actual data GetVariable(VariableDefinition, int) Return the data for a variable stored in a file IGradsGrid GetVariable(VariableDefinition definition, int file = 1) Parameters definition VariableDefinition Definition of the variable file int File number to read the info from Returns IGradsGrid Grid with meta information and the actual data GetVariable(string, FixedSurfaceType, double, int) Return the data for a variable stored in a file IGradsGrid GetVariable(string name, FixedSurfaceType surfaceType, double heightValue = 0, int file = 1) Parameters name string Variable name surfaceType FixedSurfaceType Surface type heightValue double Height value file int File number to read the info from Returns IGradsGrid Grid with meta information and the actual data Open(string, IGriddedDataReader) Open a new file for reading void Open(string dataFile, IGriddedDataReader dataReader) Parameters dataFile string Path to the file dataReader IGriddedDataReader Data reader implementation to read the file QueryDimensionInfo() Get information about the current dimensions in use DimensionInfo QueryDimensionInfo() Returns DimensionInfo Information about the dimensions in use QueryFileInfo() Get information about the current open file FileInfo QueryFileInfo() Returns FileInfo Information about the current file SetAxisLabels(Axis, AxisLabelOption, string?) Set axis labels for the x-axis or y-axis void SetAxisLabels(Axis axis, AxisLabelOption option, string? format) Parameters axis Axis X or Y axis option AxisLabelOption Axis label option format string Axis label format SetColor(int, int, int, int, int) Define a new color or update an existing color void SetColor(int colorNr, int red, int green, int blue, int alpha = 255) Parameters colorNr int Integer number between 16 and 2048 red int Red value. Number between 0 and 255 green int Green value. Number between 0 and 255 blue int Blue value. Number between 0 and 255 alpha int Transparency value. Number between -255 and 255 Exceptions InvalidColorException Throws an exception when trying to define an invalid color SetContourColors(int[]) Sets specific color numbers for contour levels specified by SetContourLevels. void SetContourColors(int[] cols) Parameters cols int[] Array of color numbers SetContourInterval(double) Sets the contour interval to the specified value. Reset by Clear or Display. void SetContourInterval(double val) Parameters val double Contour interval value SetContourLabelOptions(LabelOption, string) Set the options for the contour labels. void SetContourLabelOptions(LabelOption option, string format = \"\") Parameters option LabelOption Contour label mode format string Format of the labels. Formatting is done with standard c# string formatting Examples Example format: {0:0.0} will format the label to one decimal place SetContourLabelStyle(int, int, double) Set the style of the contour labels void SetContourLabelStyle(int color = -1, int thickness = -1, double size = 0.09) Parameters color int Color number of the labels. Default of -1 indicates the same color as the contour lines thickness int Thickness for the contour labels. Default of -1 indicates the same thickness as the contour lines size double Size of the labels. Default is 0.09 SetContourLevels(double[]) Sets specific contour levels. Usage notes: Contour levels are reset by Clear or Display. Often used in conjunction with SetContourColors to override the default settings and specify exact contour levels and the colors that go with them. void SetContourLevels(double[] levels) Parameters levels double[] Array of levels SetContourLineColor(int) Set the color of the contour lines void SetContourLineColor(int color) Parameters color int Color of the contour line. This may be one of the default colors or a new color defined with SetColor(int, int, int, int, int) SetContourLineSmoothing(SmoothOption) If on, the grid is interpolated to a finer grid using cubic interpolation before contouring. \"Sticks\". This option will result in contour values below and above the min and max of the un-interpolated grid. This may result in physically invalid values such as in the case of negative rainfall void SetContourLineSmoothing(SmoothOption option) Parameters option SmoothOption Smoothing option SetContourLineStyle(LineStyle) Set style of contour lines void SetContourLineStyle(LineStyle style) Parameters style LineStyle 0 = no contours 1 = solid 2 = long dash 3 = short dash 4 = long dash short dash 5 = dotted 6 = dot dash 7 = dot dot dash SetContourLineThickness(int) Set thickness for the contour lines void SetContourLineThickness(int cthck) Parameters cthck int Value between 1 and 256 SetContourMaximum(double) Contours not drawn above this value. reset by Clear or Display. void SetContourMaximum(double cmax) Parameters cmax double Maximum contour level SetContourMinimum(double) Contours not drawn below this value. reset by Clear or Display. void SetContourMinimum(double cmin) Parameters cmin double Minimum contour level SetE(double) void SetE(double eMin) Parameters eMin double SetGrads(OnOffSetting) Draw logo and timestamp on the plot void SetGrads(OnOffSetting onOffSetting) Parameters onOffSetting OnOffSetting Turn the logo and timestamp on or off. Default is on SetGraphicsOutputMode(GraphicsOutputMode) Set output mode for graphics. See GraphicsOutputMode for a list of available output modes. void SetGraphicsOutputMode(GraphicsOutputMode mode) Parameters mode GraphicsOutputMode Output mode SetGridLine(GridLine, int) void SetGridLine(GridLine gridLine, int color = -1) Parameters gridLine GridLine color int SetGridLineOptions(GridLineOption, int?) Used with SetGraphicsOutputMode(GraphicsOutputMode) with option Grid to control the presence and appearance of the grid lines. The options are as follows: void SetGridLineOptions(GridLineOption option, int? color = 0) Parameters option GridLineOption Control the presence color int? Color number if selecting the color mode SetGridOptions(GridOption, int, int, int) Control the grid options. void SetGridOptions(GridOption option, int style = -1, int color = -1, int thickness = -1) Parameters option GridOption Grid option style int Line style for the grid Options for line style are: 1 = solid 2 = long dash 3 = short dash 4 = long dash short dash 5 = dotted 6 = dot dash 7 = dot dot dash color int Line color for the grid. This may be one of the default colors or a new color defined with SetColor(int, int, int, int, int) thickness int Thickness for the grid lines. Must be an integer between 1 and 256 SetKmlOutput(KmlOutputFlag, string) Set KML output options void SetKmlOutput(KmlOutputFlag flag, string filename) Parameters flag KmlOutputFlag KML output format filename string Filename to write the KML data to SetLatitude(double, double) This set command sets the latitude dimension of the dimension environment using world coordinates. A file needs to be open before this command can be used void SetLatitude(double min, double max = 1.7976931348623157E+308) Parameters min double Low value max double High value (optional) SetLevel(double) This set command sets the level dimension of the dimension environment using world coordinates. A file needs to be open before this command can be used void SetLevel(double lev) Parameters lev double SetLongitude(double, double) This set command sets the longitude dimension of the dimension environment using world coordinates. A file needs to be open before this command can be used void SetLongitude(double min, double max = 1.7976931348623157E+308) Parameters min double Low value max double High value (optional) SetMapOptions(int, LineStyle?, int?) This command controls the appearance of the map lines. void SetMapOptions(int color, LineStyle? style, int? thickness) Parameters color int Color of the map lines. This may be one of the default colors or a new color defined with SetColor(int, int, int, int, int) style LineStyle? Line style for the map Options for line style are: 1 = solid 2 = long dash 3 = short dash 4 = long dash short dash 5 = dotted 6 = dot dash 7 = dot dot dash thickness int? Thickness for the map lines. Must be an integer between 1 and 256 SetMapProjection(Projection) Sets current map projection. See Projection for a list of available projections. void SetMapProjection(Projection projection) Parameters projection Projection Projection mode SetMapResolution(MapResolution) Set map resolution. See MapResolution for a list of available resolutions. void SetMapResolution(MapResolution mapResolution) Parameters mapResolution MapResolution Map resolution SetMarkerType(double) Set the style of the marker for line plots, or for the gxout option 'stnmark' void SetMarkerType(double cmark) Parameters cmark double SetPaperSize(double, double) Override the default paper size. The default paper size is 8.5x11 inches void SetPaperSize(double xsize, double ysize) Parameters xsize double X-size in inches ysize double Y-size in inches SetPolarStereoValues(OnOffSetting, double, double, double, double) Sets reference longitudes and latitudes for polar stereographic plots. By default, these are set to the current dimension environment limits. This command overrides that, and allows the data-reference to be decoupled with the map display. The polar plot will be drawn such that the region bounded by these longitudes and latitudes will be entirely included in the plot. GradsSharp will plot lat/lon lines on polar plots with no labels as yet. To turn this off, set grid off. void SetPolarStereoValues(OnOffSetting onOff, double lonmin = 0, double lonmax = 0, double latmin = 0, double latmax = 0) Parameters onOff OnOffSetting Set polar stereographic on or off lonmin double Minimum longitude lonmax double Maximum longitude latmin double Minimum latitude latmax double Maximum latitude SetPrintingArea(OnOffSetting, double, double, double, double) void SetPrintingArea(OnOffSetting onOff, double xlo = 0, double xhi = 0, double ylo = 0, double yhi = 0) Parameters onOff OnOffSetting xlo double xhi double ylo double yhi double SetStreamDensity(int) This command controls the appearance of the streamlines void SetStreamDensity(int density) Parameters density int An integer between -10 and 10. Negative values are for high-res grids. The default value is 5. SetStringOptions(int, StringJustification, int, double) Set the options for drawing strings void SetStringOptions(int color, StringJustification justification = StringJustification.BottomLeft, int thickness = -1, double rotation = -1) Parameters color int Color of the string to be printed. This may be one of the default colors or a new color defined with SetColor(int, int, int, int, int) justification StringJustification Justification thickness int Integer between 1 and 12 rotation double Desired string rotation in degrees. The center of rotation is the justification point. Rotation is counter-clockwise. Defaut rotation is 0. SetStringSize(double, double) Set the size of the string void SetStringSize(double hsize, double vsize = -1) Parameters hsize double width of the characters in virtual page inches vsize double height of the characters in virtual page inches. If vsize is not defined it will be set the same as the hsize parameter SetT(double) This set command sets the time dimension of the dimension environment using grid coordinates. void SetT(double tMin) Parameters tMin double Low value SetVpage(OnOffSetting, double, double, double, double) This command defines a \"virtual page\" that fits within the specified limits of the real page. All graphics output will be drawn into this \"virtual page\" until another set SetVpage command is entered. A clear command clears the physical page (and any virtual pages drawn on it). When GradsEngine is first initialized, it prompts for landscape or portrait mode. This defines the size of the real page (11x8.5 or 8.5x11), and the dimensions for the virtual page must fit within this real page. The SetVpage command will define virtual page limits in terms of inches (virtual page inches), which are the coordinates that will be used in the various commands that require inches to be used. The new page limits are printed when the SetVpage command completes. To return to the default state where the real page equals the virtual page, enter: SetVpage(OnOffSetting.Off); void SetVpage(OnOffSetting page, double xlo = 0, double xhi = 0, double ylo = 0, double yhi = 0) Parameters page OnOffSetting VPage on or off xlo double xhi double ylo double yhi double SetX(double, double) This set command sets the x dimension of the dimension environment using grid coordinates. void SetX(double xMin, double xMax) Parameters xMin double Low value xMax double High value SetXAxisLabelOptions(LabelOption, string) Set label options for the x-axis labels void SetXAxisLabelOptions(LabelOption option, string format = \"\") Parameters option LabelOption Label option format string Format of the labels. Formatting is done with standard c# string formatting SetXFlip(bool) Flips the order of the horizontal axis void SetXFlip(bool flip) Parameters flip bool SetY(double, double) This set command sets the y dimension of the dimension environment using grid coordinates. void SetY(double yMin, double yMax) Parameters yMin double Low value yMax double High value SetYAxisLabelOptions(LabelOption, string) Set label options for the y-axis labels void SetYAxisLabelOptions(LabelOption option, string format = \"\") Parameters option LabelOption Label option format string Format of the labels. Formatting is done with standard c# string formatting SetYFlip(bool) Flips the order of the vertical axis void SetYFlip(bool flip) Parameters flip bool SetZ(double) This set command sets the z dimension of the dimension environment using grid coordinates. void SetZ(double zMin) Parameters zMin double Low value SetZ(double, double) This set command sets the z dimension of the dimension environment using grid coordinates. void SetZ(double zMin, double zMax) Parameters zMin double Low value zMax double High value gacln(int) void gacln(int flg) Parameters flg int reinit() void reinit() reset(bool) void reset(bool doReinit = false) Parameters doReinit bool stack() void stack() swap() void swap()"
  },
  "api/gradssharp/GradsSharp.IGradsDrawingInterface.html": {
    "href": "api/gradssharp/GradsSharp.IGradsDrawingInterface.html",
    "title": "Interface IGradsDrawingInterface",
    "summary": "Interface IGradsDrawingInterface Namespace GradsSharp Assembly GradsSharp.dll Interface that gives direct access to drawing commands public interface IGradsDrawingInterface Properties ShadeColors Get the color numbers for each color used during the contour fille int[] ShadeColors { get; } Property Value int[] ShadeCount Get the number of shades after doing a contour fill. Can be used to draw a colorbar int ShadeCount { get; } Property Value int ShadeLevels Get the labels for each shade color used during the contour fill double[] ShadeLevels { get; } Property Value double[] Methods DrawFilledRectangle(double, double, double, double) Plot a color filled rectangle. void DrawFilledRectangle(double xlo, double xhi, double ylo, double yhi) Parameters xlo double Low x xhi double High x ylo double Low y yhi double High y DrawLineToPoint(double, double) Draw line from current point to x,y with clipping void DrawLineToPoint(double x, double y) Parameters x double X-Coordinate in inches y double Y-Coordinate in inches MoveToPoint(double, double) Move the drawing pen to a new point with clipping. Clipping is implmented coarsely, where any move or draw point that is outside the clip region is not plotted. void MoveToPoint(double x, double y) Parameters x double X-Coordinate in inches y double Y-Coordinate in inches SetDrawingColor(int) Set the current drawing color void SetDrawingColor(int clr) Parameters clr int Color number"
  },
  "api/gradssharp/GradsSharp.Models.ColorBarSettings.html": {
    "href": "api/gradssharp/GradsSharp.Models.ColorBarSettings.html",
    "title": "Class ColorBarSettings",
    "summary": "Class ColorBarSettings Namespace GradsSharp.Models Assembly GradsSharp.dll public class ColorBarSettings Inheritance object ColorBarSettings Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ColorBarSettings() public ColorBarSettings() Properties Caption public string Caption { get; set; } Property Value string Direction public ColorBarDirection Direction { get; set; } Property Value ColorBarDirection FontHeight public double FontHeight { get; set; } Property Value double FontThickness public double FontThickness { get; set; } Property Value double FontWidth public double FontWidth { get; set; } Property Value double LabelColorNumber public int LabelColorNumber { get; set; } Property Value int LabelFormat public string LabelFormat { get; set; } Property Value string LabelInterval public double LabelInterval { get; set; } Property Value double LabelOffset public string LabelOffset { get; set; } Property Value string LabelXOffset public double LabelXOffset { get; set; } Property Value double LabelYOffset public double LabelYOffset { get; set; } Property Value double LineColor public int LineColor { get; set; } Property Value int Lines public OnOffSetting Lines { get; set; } Property Value OnOffSetting XMax public double XMax { get; set; } Property Value double XMin public double XMin { get; set; } Property Value double XOffset public double XOffset { get; set; } Property Value double YMax public double YMax { get; set; } Property Value double YMin public double YMin { get; set; } Property Value double YOffset public double YOffset { get; set; } Property Value double"
  },
  "api/gradssharp/GradsSharp.Models.ColorDefinition.html": {
    "href": "api/gradssharp/GradsSharp.Models.ColorDefinition.html",
    "title": "Class ColorDefinition",
    "summary": "Class ColorDefinition Namespace GradsSharp.Models Assembly GradsSharp.dll public class ColorDefinition Inheritance object ColorDefinition Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors ColorDefinition(int) public ColorDefinition(int colorNumber) Parameters colorNumber int ColorDefinition(int, int, int, int) public ColorDefinition(int colorNumber, int red, int green, int blue) Parameters colorNumber int red int green int blue int ColorDefinition(int, int, int, int, int) public ColorDefinition(int colorNumber, int red, int green, int blue, int alpha) Parameters colorNumber int red int green int blue int alpha int Properties Alpha public int Alpha { get; set; } Property Value int Blue public int Blue { get; set; } Property Value int ColorNumber public int ColorNumber { get; set; } Property Value int Green public int Green { get; set; } Property Value int Red public int Red { get; set; } Property Value int Operators implicit operator ColorDefinition((int c, int r, int g, int b, int a)) public static implicit operator ColorDefinition((int c, int r, int g, int b, int a) colorDef) Parameters colorDef (int, int, int, int, int) Returns ColorDefinition implicit operator ColorDefinition((int c, int r, int g, int b)) public static implicit operator ColorDefinition((int c, int r, int g, int b) colorDef) Parameters colorDef (int c, int r, int g, int b) Returns ColorDefinition"
  },
  "api/gradssharp/GradsSharp.Models.DimensionInfo.html": {
    "href": "api/gradssharp/GradsSharp.Models.DimensionInfo.html",
    "title": "Class DimensionInfo",
    "summary": "Class DimensionInfo Namespace GradsSharp.Models Assembly GradsSharp.dll Dimension info returned by QueryDimensionInfo() public class DimensionInfo Inheritance object DimensionInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors DimensionInfo() public DimensionInfo() Properties DefaultFileNumber File number currently in use for fetching data public int DefaultFileNumber { get; set; } Property Value int DimensionTypeE Type of dimension for E-dimension public DimensionType DimensionTypeE { get; set; } Property Value DimensionType DimensionTypeT Type of dimension for T-dimension public DimensionType DimensionTypeT { get; set; } Property Value DimensionType DimensionTypeX Type of dimension for X-axis public DimensionType DimensionTypeX { get; set; } Property Value DimensionType DimensionTypeY Type of dimension for Y-axis public DimensionType DimensionTypeY { get; set; } Property Value DimensionType DimensionTypeZ Type of dimension for Z-axis public DimensionType DimensionTypeZ { get; set; } Property Value DimensionType EMax public double EMax { get; set; } Property Value double EMin public double EMin { get; set; } Property Value double Ensemble public int Ensemble { get; set; } Property Value int LatMax Maximum latitude value public double LatMax { get; set; } Property Value double LatMin Minimum latitude value public double LatMin { get; set; } Property Value double Level Current level public double Level { get; set; } Property Value double LonMax Maximum longitude value public double LonMax { get; set; } Property Value double LonMin Minimum longitude value public double LonMin { get; set; } Property Value double TMax public double TMax { get; set; } Property Value double TMin public double TMin { get; set; } Property Value double Time Current time public DateTime Time { get; set; } Property Value DateTime XMax public double XMax { get; set; } Property Value double XMin public double XMin { get; set; } Property Value double YMax public double YMax { get; set; } Property Value double YMin public double YMin { get; set; } Property Value double ZMax public double ZMax { get; set; } Property Value double ZMin public double ZMin { get; set; } Property Value double"
  },
  "api/gradssharp/GradsSharp.Models.FileInfo.html": {
    "href": "api/gradssharp/GradsSharp.Models.FileInfo.html",
    "title": "Class FileInfo",
    "summary": "Class FileInfo Namespace GradsSharp.Models Assembly GradsSharp.dll public class FileInfo Inheritance object FileInfo Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors FileInfo() public FileInfo() Properties FileName public string FileName { get; set; } Property Value string NumberOfLevels public int NumberOfLevels { get; set; } Property Value int XSize public int XSize { get; set; } Property Value int YSize public int YSize { get; set; } Property Value int"
  },
  "api/gradssharp/GradsSharp.Models.IGradsGrid.html": {
    "href": "api/gradssharp/GradsSharp.Models.IGradsGrid.html",
    "title": "Interface IGradsGrid",
    "summary": "Interface IGradsGrid Namespace GradsSharp.Models Assembly GradsSharp.dll Contains data and meta information about gridded data public interface IGradsGrid : ICloneable Inherited Members ICloneable.Clone() Extension Methods GridMaskFunctions.Const(IGradsGrid, int, ConstMode) GridMaskFunctions.MaskOut(IGradsGrid, IGradsGrid) GridMaskFunctions.Skip(IGradsGrid, int) GridMaskFunctions.Skip(IGradsGrid, int, int) GridMathFunctions.Add(IGradsGrid, IGradsGrid) GridMathFunctions.Add(IGradsGrid, double) GridMathFunctions.Average(IGradsGrid, params IGradsGrid[]) GridMathFunctions.CDiff(IGradsGrid, Dimension) GridMathFunctions.Divide(IGradsGrid, IGradsGrid) GridMathFunctions.Divide(IGradsGrid, double) GridMathFunctions.Exp(IGradsGrid) GridMathFunctions.HCurl(IGradsGrid, IGradsGrid) GridMathFunctions.Log(IGradsGrid) GridMathFunctions.Multiply(IGradsGrid, IGradsGrid) GridMathFunctions.Multiply(IGradsGrid, double) GridMathFunctions.Pow(IGradsGrid, double) GridMathFunctions.Sqrt(IGradsGrid) GridMathFunctions.Subtract(IGradsGrid, IGradsGrid) GridMathFunctions.Subtract(IGradsGrid, double) GridSmoothFunctions.Smooth9(IGradsGrid, double, double, double) Properties DimensionMaximum int[] DimensionMaximum { get; } Property Value int[] DimensionMinimum int[] DimensionMinimum { get; } Property Value int[] GridData double[] GridData { get; set; } Property Value double[] IDimension int IDimension { get; set; } Property Value int ISize int ISize { get; } Property Value int JDimension int JDimension { get; set; } Property Value int JSize int JSize { get; } Property Value int Undef double Undef { get; set; } Property Value double UndefinedMask byte[] UndefinedMask { get; set; } Property Value byte[] WorldDimensionMaximum double[] WorldDimensionMaximum { get; } Property Value double[] WorldDimensionMinimum double[] WorldDimensionMinimum { get; } Property Value double[] Methods CloneGrid() IGradsGrid CloneGrid() Returns IGradsGrid Operators operator +(IGradsGrid, IGradsGrid) Operator to sum all elements in two grids public static IGradsGrid operator +(IGradsGrid grid, IGradsGrid otherGrid) Parameters grid IGradsGrid Grid to add a value to otherGrid IGradsGrid Other grid to add Returns IGradsGrid operator +(IGradsGrid, double) Operator to add a value to all elements in the grid public static IGradsGrid operator +(IGradsGrid grid, double value) Parameters grid IGradsGrid Grid to add a value to value double Value to add Returns IGradsGrid operator /(IGradsGrid, IGradsGrid) Operator to divide all elements in two grids public static IGradsGrid operator /(IGradsGrid grid, IGradsGrid otherGrid) Parameters grid IGradsGrid Grid to multiply otherGrid IGradsGrid Other grid to multiply Returns IGradsGrid operator /(IGradsGrid, double) Operator to divide all elements in the grid with a value public static IGradsGrid operator /(IGradsGrid grid, double value) Parameters grid IGradsGrid Grid to multiply value double Value to multiply with Returns IGradsGrid operator ^(IGradsGrid, double) Operator to get the square root of all elements in the grid public static IGradsGrid operator ^(IGradsGrid grid, double value) Parameters grid IGradsGrid value double Returns IGradsGrid operator *(IGradsGrid, IGradsGrid) Operator to multiply all elements in two grids public static IGradsGrid operator *(IGradsGrid grid, IGradsGrid otherGrid) Parameters grid IGradsGrid Grid to multiply otherGrid IGradsGrid Other grid to multiply Returns IGradsGrid operator *(IGradsGrid, double) Operator to multiply all elements in the grid with a value public static IGradsGrid operator *(IGradsGrid grid, double value) Parameters grid IGradsGrid Grid to multiply value double Value to multiply with Returns IGradsGrid operator -(IGradsGrid, IGradsGrid) Operator to subtract all elements in two grids public static IGradsGrid operator -(IGradsGrid grid, IGradsGrid otherGrid) Parameters grid IGradsGrid Grid to add a value to otherGrid IGradsGrid Other grid to add Returns IGradsGrid operator -(IGradsGrid, double) Operator to subtract a value from all elements in the grid public static IGradsGrid operator -(IGradsGrid grid, double value) Parameters grid IGradsGrid Grid to add a value to value double Value to add Returns IGradsGrid"
  },
  "api/gradssharp/GradsSharp.Models.InputFile.html": {
    "href": "api/gradssharp/GradsSharp.Models.InputFile.html",
    "title": "Class InputFile",
    "summary": "Class InputFile Namespace GradsSharp.Models Assembly GradsSharp.dll This class is used to supply information about the opened file to GradsEngine. public class InputFile Inheritance object InputFile Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InputFile() public InputFile() Properties De Number of points in E-direction public int De { get; set; } Property Value int Dt Number of points in T-Direction public int Dt { get; set; } Property Value int Dx Number of points in X-Direction public int Dx { get; set; } Property Value int Dy Number of points in Y-Direction public int Dy { get; set; } Property Value int Dz Number of points in Z-direction public int Dz { get; set; } Property Value int EDimensionType public InputFileDimensionType EDimensionType { get; set; } Property Value InputFileDimensionType EIncrement public double? EIncrement { get; set; } Property Value double? ELevels public double[]? ELevels { get; set; } Property Value double[] EMin public double? EMin { get; set; } Property Value double? FileName Path to the file public string FileName { get; set; } Property Value string FileType Type of the file public FileType FileType { get; set; } Property Value FileType PreProjectionValues public double[]? PreProjectionValues { get; set; } Property Value double[] PreprojectedISize Horizontal size of the preprojected grid public int PreprojectedISize { get; set; } Property Value int PreprojectedJSize Vertical size of the preprojected grid public int PreprojectedJSize { get; set; } Property Value int PreprojectedType Preprojected type public PreprojectedType PreprojectedType { get; set; } Property Value PreprojectedType ReferenceTime Time step of the file public DateTime ReferenceTime { get; set; } Property Value DateTime TDimensionType public InputFileDimensionType TDimensionType { get; set; } Property Value InputFileDimensionType TIncrement public double? TIncrement { get; set; } Property Value double? TLevels public double[]? TLevels { get; set; } Property Value double[] TMin public double? TMin { get; set; } Property Value double? TimeStepIntervalMinutes public int TimeStepIntervalMinutes { get; set; } Property Value int Variables List of variables in the file public List<InputVariable> Variables { get; set; } Property Value List<InputVariable> XDimensionType public InputFileDimensionType XDimensionType { get; set; } Property Value InputFileDimensionType XIncrement public double? XIncrement { get; set; } Property Value double? XLevels public double[]? XLevels { get; set; } Property Value double[] XMin public double? XMin { get; set; } Property Value double? YDimensionType public InputFileDimensionType YDimensionType { get; set; } Property Value InputFileDimensionType YIncrement public double? YIncrement { get; set; } Property Value double? YLevels public double[]? YLevels { get; set; } Property Value double[] YMin public double? YMin { get; set; } Property Value double? ZDimensionType public InputFileDimensionType ZDimensionType { get; set; } Property Value InputFileDimensionType ZIncrement public double? ZIncrement { get; set; } Property Value double? ZLevels public double[]? ZLevels { get; set; } Property Value double[] ZMin public double? ZMin { get; set; } Property Value double?"
  },
  "api/gradssharp/GradsSharp.Models.InputVariable.html": {
    "href": "api/gradssharp/GradsSharp.Models.InputVariable.html",
    "title": "Class InputVariable",
    "summary": "Class InputVariable Namespace GradsSharp.Models Assembly GradsSharp.dll Information about a variable in the input file public class InputVariable Inheritance object InputVariable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors InputVariable() public InputVariable() Properties Abbreviation Abrreviation of the variable public string Abbreviation { get; set; } Property Value string Definition Variable definition public VariableDefinition Definition { get; set; } Property Value VariableDefinition"
  },
  "api/gradssharp/GradsSharp.Models.Internal.MapData.html": {
    "href": "api/gradssharp/GradsSharp.Models.Internal.MapData.html",
    "title": "Class MapData",
    "summary": "Class MapData Namespace GradsSharp.Models.Internal Assembly GradsSharp.dll public class MapData Inheritance object MapData Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MapData() public MapData() Properties FileName public string FileName { get; set; } Property Value string Records public List<MapDataRecord> Records { get; set; } Property Value List<MapDataRecord>"
  },
  "api/gradssharp/GradsSharp.Models.Internal.MapDataRecord.html": {
    "href": "api/gradssharp/GradsSharp.Models.Internal.MapDataRecord.html",
    "title": "Class MapDataRecord",
    "summary": "Class MapDataRecord Namespace GradsSharp.Models.Internal Assembly GradsSharp.dll public class MapDataRecord Inheritance object MapDataRecord Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors MapDataRecord() public MapDataRecord() Properties Data public int[] Data { get; set; } Property Value int[] FilePos public int FilePos { get; set; } Property Value int Header public int[] Header { get; set; } Property Value int[]"
  },
  "api/gradssharp/GradsSharp.Models.Internal.html": {
    "href": "api/gradssharp/GradsSharp.Models.Internal.html",
    "title": "Namespace GradsSharp.Models.Internal",
    "summary": "Namespace GradsSharp.Models.Internal Classes MapData MapDataRecord"
  },
  "api/gradssharp/GradsSharp.Models.TextOutput.html": {
    "href": "api/gradssharp/GradsSharp.Models.TextOutput.html",
    "title": "Class TextOutput",
    "summary": "Class TextOutput Namespace GradsSharp.Models Assembly GradsSharp.dll public class TextOutput Inheritance object TextOutput Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors TextOutput() public TextOutput() Properties FontColor public int FontColor { get; set; } Property Value int Height public double Height { get; set; } Property Value double Justification public StringJustification Justification { get; set; } Property Value StringJustification LocationX public double LocationX { get; set; } Property Value double LocationY public double LocationY { get; set; } Property Value double Rotation public double Rotation { get; set; } Property Value double Text public string Text { get; set; } Property Value string Thickness public int Thickness { get; set; } Property Value int Width public double Width { get; set; } Property Value double"
  },
  "api/gradssharp/GradsSharp.Models.VariableDefinition.html": {
    "href": "api/gradssharp/GradsSharp.Models.VariableDefinition.html",
    "title": "Class VariableDefinition",
    "summary": "Class VariableDefinition Namespace GradsSharp.Models Assembly GradsSharp.dll This class holds information needed to fetch variabbles from the data. It is passed on the a IGriddedDataReader to fetch the data public class VariableDefinition Inheritance object VariableDefinition Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Constructors VariableDefinition() public VariableDefinition() Properties File Current file public int File { get; set; } Property Value int HeightType First Surface type public FixedSurfaceType HeightType { get; set; } Property Value FixedSurfaceType HeightValue Height public double HeightValue { get; set; } Property Value double SecondHeightType Second Surface type public FixedSurfaceType SecondHeightType { get; set; } Property Value FixedSurfaceType SecondHeightValue Second Height public double SecondHeightValue { get; set; } Property Value double VariableName Name of the variable public string VariableName { get; set; } Property Value string Methods Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool ToString() public override string ToString() Returns string Operators operator ==(VariableDefinition, VariableDefinition) public static bool operator ==(VariableDefinition a, VariableDefinition b) Parameters a VariableDefinition b VariableDefinition Returns bool operator !=(VariableDefinition, VariableDefinition) public static bool operator !=(VariableDefinition a, VariableDefinition b) Parameters a VariableDefinition b VariableDefinition Returns bool"
  },
  "api/gradssharp/GradsSharp.Models.html": {
    "href": "api/gradssharp/GradsSharp.Models.html",
    "title": "Namespace GradsSharp.Models",
    "summary": "Namespace GradsSharp.Models Namespaces GradsSharp.Models.Internal Classes ColorBarSettings ColorDefinition DimensionInfo Dimension info returned by QueryDimensionInfo() FileInfo InputFile This class is used to supply information about the opened file to GradsEngine. InputVariable Information about a variable in the input file TextOutput VariableDefinition This class holds information needed to fetch variabbles from the data. It is passed on the a IGriddedDataReader to fetch the data Interfaces IGradsGrid Contains data and meta information about gridded data"
  },
  "api/gradssharp/GradsSharp.Utils.StringToDouble.html": {
    "href": "api/gradssharp/GradsSharp.Utils.StringToDouble.html",
    "title": "Class StringToDouble",
    "summary": "Class StringToDouble Namespace GradsSharp.Utils Assembly GradsSharp.dll Provides methods to convert a string to a double precision floating point number. public static class StringToDouble Inheritance object StringToDouble Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Methods Parse(string, int, out int) Extracts a number from the specified string, starting at the specified index. public static double Parse(string input, int start, out int end) Parameters input string The string to extract a number from. start int The index of the first character in the string to start converting to a number. end int When this methods returns, contains the index of the end of the extracted number. Returns double A number representation of the string. Exceptions ArgumentNullException input is null. ArgumentOutOfRangeException start represents an index that is outside of the range for input."
  },
  "api/gradssharp/GradsSharp.Utils.html": {
    "href": "api/gradssharp/GradsSharp.Utils.html",
    "title": "Namespace GradsSharp.Utils",
    "summary": "Namespace GradsSharp.Utils Classes StringToDouble Provides methods to convert a string to a double precision floating point number."
  },
  "api/gradssharp/GradsSharp.html": {
    "href": "api/gradssharp/GradsSharp.html",
    "title": "Namespace GradsSharp",
    "summary": "Namespace GradsSharp Namespaces GradsSharp.Data GradsSharp.Drawing.Grads GradsSharp.Enums GradsSharp.Exceptions GradsSharp.Models GradsSharp.Utils Classes GradsEngine This class is the basis to start working with the library. It gives you an interface to send commands to the drawing backend. It requires registration of a IDrawingEngine to be able to output the drawings to an outputtype of choice Interfaces IGradsCommandInterface Interface for sending commands to the Grads engine IGradsDrawingInterface Interface that gives direct access to drawing commands"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "",
    "summary": ""
  },
  "documentation/command-interface.html": {
    "href": "documentation/command-interface.html",
    "title": "Command interface",
    "summary": "Command interface When instantiating a GradsEngine all command to operate are found under the GradsCommandInterface property."
  },
  "documentation/creating-a-reader.html": {
    "href": "documentation/creating-a-reader.html",
    "title": "Creating your own data reader",
    "summary": "Creating your own data reader Custom readers can be built to allow GradsSharp to read data from file. A default example implementation can be found on Github Implementing a reader To implement a new reader create a new C# library project. Create a new reader class that implements the IGriddedDataReader interface: public class MyOwnReader : IGriddedDataReader { public InputFile OpenFile(Stream stream, string file) { } public InputFile OpenFile(string file) { } public void ReadData(IGradsGrid grid, VariableDefinition definition) { } } Implement the methods with your own logic. The OpenFile method should return an InputFile instance with all information about the file including the dimension values. The ReadData method actually reads data from the file. The data should be stored in the grid.GridData property as a double array. Also the Undefinedmask property should be set"
  },
  "documentation/getting-started.html": {
    "href": "documentation/getting-started.html",
    "title": "Quick start",
    "summary": "Quick start Following instructions show how to get started with GradsSharp. The sample outputs GFS weather data to a png file. Installing To start using GradsSharp in your project first add the dependency to your project: dotnet new console -n MyChartPlotter cd MyChartPlotter dotnet add package GradsSharp Next install a drawing engine, e.g. Cairo: dotnet add package GradsSharp.DrawingEngine.Cairo Next install the GFS data reader: dotnet add package GradsSharp.DataReader.GFS Plotting a weather chart The following sample assumes you download a grib file from the NOAA website using GradsSharp; using GradsSharp.Data.GridFunctions; using GradsSharp.DataReader.GFS; using GradsSharp.DrawingEngine.Cairo; using GradsSharp.Models; var engine = new GradsEngine(); engine.RegisterDrawingEngine(new CairoDrawingEngine(engine)); engine.InitEngine(); engine.GradsCommandInterface.Open(\"gfs.t00z.pgrb2.0p25.f001\", new GFSDataReader()); // setup the environment with the available methods in the command interface engine.GradsCommandInterface.SetPrintingArea(OnOffSetting.On, 0, 11, 0, 8); engine.GradsCommandInterface.SetLatitude(42,55); engine.GradsCommandInterface.SetLongitude(-3,12); engine.GradsCommandInterface.SetGraphicsOutputMode(GraphicsOutputMode.Shaded); engine.GradsCommandInterface.SetT(1); engine.GradsCommandInterface.SetMapResolution(MapResolution.HighResolution); IGradsGrid data = engine.GradsCommandInterface.GetVariable(new VariableDefinition() { HeightType = FixedSurfaceType.SpecifiedHeightLevelAboveGround, HeightValue = 2, VariableName = \"Temperature\" }); data = data - 273.15; engine.GradsCommandInterface.Define(\"t2m\", data); engine.GradsCommandInterface.Display(\"t2m\"); // now output the image to output.png engine.GradsCommandInterface.ExportImage(\"t2m.png\", OutputFormat.PNG, horizontalSize: 1024, verticalSize: 768); engine.EndDrawing(); After building the project now run the executable. On Windows do not use dotnet run, but execute the exe directly from the Debug or Release directory. Important Make sure to have a grib file witht the name gfs.t00z.pgrb2.0p25.f001 in the same directory of your executable. The result should be an image like this:"
  },
  "index.html": {
    "href": "index.html",
    "title": "GradsSharp Documentation",
    "summary": "GradsSharp Documentation GradsSharp is a C# port of the popular OpenGrads Software. This project is not an executable as OpenGrads is. Instead this is a .NET library that allows you to write software that automates plotting weather charts and other charts based on gridded data. Benefits and Features Library allowing you to automate plotting from within your own software Pluggable data readers: the library cannot read gridded data, but allows plugging in your own datareader. A sample reader for GFS data is provided Graphics output pluggable: the library does not plot on it's own. A drawing engine can be implemented by yourself or the standard Cairo engine can be used to output data to image files Has mathematics functions included to apply calculations on grids before plotting them Getting started"
  }
}